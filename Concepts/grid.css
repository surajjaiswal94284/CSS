/* Grid-It is same as flex but mostly used in specific
cases for creating 2d layouts. 
Includes
grid-lines,grid-cell,grid-track(space btw two lines)
grid-template-Used to give row and column for grid container
grid-columns=Defines an item start and ending position in columns
include
grid-column-start,grid-column-end
grid-row-start,grid-row-end=same as above
Grid-properties
HORIZONTAL
1.Justify-items(container)=start,end,center
2.justify-self(items)=start,end,center
Vertical
1.Align-items(container)=start,end,center
2.Align-self(items)=start,end,center
BOTH HORIZONTAL-VERTICAL
1.place-items(container)
2.place-self(items)
------------------------
display:inline-grid(It help us to display grid as inline elements)*/
#container{
    width:600px;
    height: 300px;
    background-color: yellow;
    display: grid;/*Default set to column*/
    /* grid-template-rows: 100px 100px 100px;
    grid-template-columns: 100px 100px 100px; */
    grid-template-rows: repeat(4,1fr);/* count,fr=fractional unit*/
    grid-template-columns: repeat(3,1fr);/*repeat is used to divide all the avail. space*/
    /*Gap-It defines the gap btw the lines*/
    /* row-gap: 10px;
    column-gap: 10px;  */
    grid-gap:20px;/*Short hand-row,column both
        grid-gap:10px 20px row,column*/
    justify-items: end;/*applied for whole items in grid*/
}
#one{
    /* grid-column-start: 1;
    grid-column-end: 3; */
    /* grid-column: 1/4;  */
    /* grid-column: 1/span 2;    */
    justify-self: center;/*applied for particular items in grid*/
}
#two{
    /* grid-row: 1/span 3; */
}
.class{
    width:100px;
    height: 50px;
    background-color: greenyellow;
    border: 2px solid black;
}